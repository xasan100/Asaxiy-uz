{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\nconst initialState = {\n  cartItems: localStorage.getItem(\"cartItems\") ? JSON.parse(localStorage.getItem(\"cartItems\")) : [],\n  cartTotalQuantity: 0,\n  cartTotalAmount: 0\n};\n// const  cartSlice=createSlice({\n//     name:\"cart\",\n//     initialState,\n//     reducers:{\n//         addToCart(state, action) {\n//             const itemIndex = state.cartItems.findIndex(\n//               (item) => item.id === action.payload.id\n//      );\n//    if (itemIndex>=0) {\n//     state.cartItems[itemIndex].cartQuantity +=1;\n//     toast.info(`increased ${state.cartItems[itemIndex].item} product quantity`,{ \n//         position:\"bottom-left\" ,\n//     })\n//    }\n//    else {\n//     const tempProductItem={...action.payload,cartQuantity:1};\n//     state.cartItems.push(tempProductItem); \n\n//     toast.success(` ${action.payload.item} add new to cart` ,{\n//         position:\"bottom-left\" ,\n//        })\n//     }\n//     localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n//  },\n//  remoFromCart(state,action) {\n//    const nexTcartItms=  state.cartItems.filter((cartItem) =>cartItem.id!==action.payload.id)\n//    state.cartItems=nexTcartItms;\n//    localStorage.setItem(\"cartItems\",JSON.stringify(state.cartItems));\n//    toast.error(` ${action.payload.item} removed from cart` ,{\n//     position:\"bottom-left\" ,\n//    })\n//  },\n//  decreaseCart (state,action) {\n//  const itemIndex=state.cartItems.findIndex(\n//     cartItem =>cartItem.id===action.payload.id\n//  )\n//  if (state.cartItems[itemIndex].cartQuantity > 1) {\n//     state.cartItems[itemIndex].cartQuantity -=1\n//     toast.info(` Decreased ${action.payload.item} cart  quantitiy` ,{\n//         position:\"bottom-left\" ,\n//        })\n//  }else if ( state.cartItems[itemIndex].cartQuantity === 1) {\n\n//     const nexTcartItms=  state.cartItems.filter((cartItem) =>cartItem.id!==action.payload.id)\n//     state.cartItems=nexTcartItms;\n//     toast.error(` ${action.payload.item} removed from cart` ,{\n//         position:\"bottom-left\" ,\n//     })\n// }\n// localStorage.setItem(\"cartItems\",JSON.stringify(state.cartItems));\n// },\n// Clearcart(state,action){\n//     state.cartItems=[];\n//     toast.error(`Cart cleared` ,{\n//         position:\"bottom-left\" ,\n//     });\n// localStorage.setItem(\"cartItems\",JSON.stringify(state.cartItems));\n// },\n//     getToals(state,action) {\n//      let{total,quantity}=state.cartItems.reducer((cartTotal,cartItem)=>{\n//             const  {price,cartQuantity}=cartItem;\n//             const itemTotal=price*cartQuantity;\n//             cartTotal.total+=itemTotal\n//             cartTotal.quantity+=quantity\n//             return cartTotal\n//         },{\n//             total:0,\n//             quantity:0\n//         })\n//         state.cartTotalQuantity=quantity;\n//         state.cartTotalAmount=total;\n//     }\n// },\n// });\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: localStorage.getItem(\"cartItmes\") ? JSON.parse(localStorage.getItem(\"cartItems\")) : [],\n  reducers: {\n    addToCart(state, action) {\n      const existingIndex = state.cartItems.findIndex(item => item.id === action.payload.id);\n      if (existingIndex >= 0) {\n        state.cartItems[existingIndex] = {\n          ...state.cartItems[existingIndex],\n          cartQuantity: state.cartItems[existingIndex].cartQuantity + 1\n        };\n        toast.info(\"Increased product quantity\", {\n          position: \"bottom-left\"\n        });\n      } else {\n        let tempProductItem = {\n          ...action.payload,\n          cartQuantity: 1\n        };\n        state.cartItems.push(tempProductItem);\n        toast.success(\"Product added to cart\", {\n          position: \"bottom-left\"\n        });\n      }\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    },\n    decreaseCart(state, action) {\n      const itemIndex = state.cartItems.findIndex(item => item.id === action.payload.id);\n      if (state.cartItems[itemIndex].cartQuantity > 1) {\n        state.cartItems[itemIndex].cartQuantity -= 1;\n        toast.info(\"Decreased product quantity\", {\n          position: \"bottom-left\"\n        });\n      } else if (state.cartItems[itemIndex].cartQuantity === 1) {\n        const nextCartItems = state.cartItems.filter(item => item.id !== action.payload.id);\n        state.cartItems = nextCartItems;\n        toast.error(\"Product removed from cart\", {\n          position: \"bottom-left\"\n        });\n      }\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    },\n    removeFromCart(state, action) {\n      state.cartItems.map(cartItem => {\n        if (cartItem.id === action.payload.id) {\n          const nextCartItems = state.cartItems.filter(item => item.id !== cartItem.id);\n          state.cartItems = nextCartItems;\n          toast.error(\"Product removed from cart\", {\n            position: \"bottom-left\"\n          });\n        }\n        localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n        return state;\n      });\n    },\n    getTotals(state, action) {\n      let {\n        total,\n        quantity\n      } = state.cartItems.reduce((cartTotal, cartItem) => {\n        const {\n          price,\n          cartQuantity\n        } = cartItem;\n        const itemTotal = price * cartQuantity;\n        cartTotal.total += itemTotal;\n        cartTotal.quantity += cartQuantity;\n        return cartTotal;\n      }, {\n        total: 0,\n        quantity: 0\n      });\n      total = parseFloat(total.toFixed(2));\n      state.cartTotalQuantity = quantity;\n      state.cartTotalAmount = total;\n    },\n    clearCart(state, action) {\n      state.cartItems = [];\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n      toast.error(\"Cart cleared\", {\n        position: \"bottom-left\"\n      });\n    }\n  }\n});\nexport const {\n  addToCart,\n  decreaseCart,\n  removeFromCart,\n  getTotals,\n  clearCart\n} = cartSlice.actions;\nexport default cartSlice.reducer;\n\n// export const { addToCart, remoFromCart,decreaseCart,Clearcart,getToals }=cartSlice.actions;\n// export default cartSlice.reducer;","map":{"version":3,"names":["createSlice","toast","initialState","cartItems","localStorage","getItem","JSON","parse","cartTotalQuantity","cartTotalAmount","cartSlice","name","reducers","addToCart","state","action","existingIndex","findIndex","item","id","payload","cartQuantity","info","position","tempProductItem","push","success","setItem","stringify","decreaseCart","itemIndex","nextCartItems","filter","error","removeFromCart","map","cartItem","getTotals","total","quantity","reduce","cartTotal","price","itemTotal","parseFloat","toFixed","clearCart","actions","reducer"],"sources":["/Users/xasan/Desktop/asaxiyuz/Fron-end/src/Components/features/cartSlice.js"],"sourcesContent":["import {createSlice} from \"@reduxjs/toolkit\"\nimport {toast} from \"react-toastify\"\nconst initialState={\n      cartItems: localStorage.getItem(\"cartItems\")\n    ? JSON.parse(localStorage.getItem(\"cartItems\"))\n    : [],\n    cartTotalQuantity: 0,\n    cartTotalAmount: 0,\n\n \n}\n// const  cartSlice=createSlice({\n//     name:\"cart\",\n//     initialState,\n//     reducers:{\n//         addToCart(state, action) {\n//             const itemIndex = state.cartItems.findIndex(\n//               (item) => item.id === action.payload.id\n//      );\n//    if (itemIndex>=0) {\n//     state.cartItems[itemIndex].cartQuantity +=1;\n//     toast.info(`increased ${state.cartItems[itemIndex].item} product quantity`,{ \n//         position:\"bottom-left\" ,\n//     })\n//    }\n//    else {\n//     const tempProductItem={...action.payload,cartQuantity:1};\n//     state.cartItems.push(tempProductItem); \n\n//     toast.success(` ${action.payload.item} add new to cart` ,{\n//         position:\"bottom-left\" ,\n//        })\n//     }\n//     localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n//  },\n//  remoFromCart(state,action) {\n//    const nexTcartItms=  state.cartItems.filter((cartItem) =>cartItem.id!==action.payload.id)\n//    state.cartItems=nexTcartItms;\n//    localStorage.setItem(\"cartItems\",JSON.stringify(state.cartItems));\n//    toast.error(` ${action.payload.item} removed from cart` ,{\n//     position:\"bottom-left\" ,\n//    })\n//  },\n//  decreaseCart (state,action) {\n//  const itemIndex=state.cartItems.findIndex(\n//     cartItem =>cartItem.id===action.payload.id\n//  )\n//  if (state.cartItems[itemIndex].cartQuantity > 1) {\n//     state.cartItems[itemIndex].cartQuantity -=1\n//     toast.info(` Decreased ${action.payload.item} cart  quantitiy` ,{\n//         position:\"bottom-left\" ,\n//        })\n//  }else if ( state.cartItems[itemIndex].cartQuantity === 1) {\n\n//     const nexTcartItms=  state.cartItems.filter((cartItem) =>cartItem.id!==action.payload.id)\n//     state.cartItems=nexTcartItms;\n//     toast.error(` ${action.payload.item} removed from cart` ,{\n//         position:\"bottom-left\" ,\n//     })\n// }\n// localStorage.setItem(\"cartItems\",JSON.stringify(state.cartItems));\n// },\n// Clearcart(state,action){\n//     state.cartItems=[];\n//     toast.error(`Cart cleared` ,{\n//         position:\"bottom-left\" ,\n//     });\n// localStorage.setItem(\"cartItems\",JSON.stringify(state.cartItems));\n// },\n//     getToals(state,action) {\n//      let{total,quantity}=state.cartItems.reducer((cartTotal,cartItem)=>{\n//             const  {price,cartQuantity}=cartItem;\n//             const itemTotal=price*cartQuantity;\n//             cartTotal.total+=itemTotal\n//             cartTotal.quantity+=quantity\n//             return cartTotal\n//         },{\n//             total:0,\n//             quantity:0\n//         })\n//         state.cartTotalQuantity=quantity;\n//         state.cartTotalAmount=total;\n//     }\n// },\n// });\n\n\nconst cartSlice = createSlice({\n    name: \"cart\",\n    initialState: localStorage.getItem(\"cartItmes\")?JSON.parse( localStorage.getItem(\"cartItems\")):[],  \n    reducers: {\n      addToCart(state, action) {\n        const existingIndex = state.cartItems.findIndex(\n          (item) => item.id === action.payload.id\n        );\n  \n        if (existingIndex >= 0) {\n          state.cartItems[existingIndex] = {\n            ...state.cartItems[existingIndex],\n            cartQuantity: state.cartItems[existingIndex].cartQuantity + 1,\n          };\n          toast.info(\"Increased product quantity\", {\n            position: \"bottom-left\",\n          });\n        } else {\n          let tempProductItem = { ...action.payload, cartQuantity: 1 };\n          state.cartItems.push(tempProductItem);\n          toast.success(\"Product added to cart\", {\n            position: \"bottom-left\",\n          });\n        }\n        localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n      },\n      decreaseCart(state, action) {\n        const itemIndex = state.cartItems.findIndex(\n          (item) => item.id === action.payload.id\n        );\n  \n        if (state.cartItems[itemIndex].cartQuantity > 1) {\n          state.cartItems[itemIndex].cartQuantity -= 1;\n  \n          toast.info(\"Decreased product quantity\", {\n            position: \"bottom-left\",\n          });\n        } else if (state.cartItems[itemIndex].cartQuantity === 1) {\n          const nextCartItems = state.cartItems.filter(\n            (item) => item.id !== action.payload.id\n          );\n  \n          state.cartItems = nextCartItems;\n  \n          toast.error(\"Product removed from cart\", {\n            position: \"bottom-left\",\n          });\n        }\n  \n        localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n      },\n      removeFromCart(state, action) {\n        state.cartItems.map((cartItem) => {\n          if (cartItem.id === action.payload.id) {\n            const nextCartItems = state.cartItems.filter(\n              (item) => item.id !== cartItem.id\n            );\n  \n            state.cartItems = nextCartItems;\n  \n            toast.error(\"Product removed from cart\", {\n              position: \"bottom-left\",\n            });\n          }\n          localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n          return state;\n        });\n      },\n      getTotals(state, action) {\n        let { total, quantity } = state.cartItems.reduce(\n          (cartTotal, cartItem) => {\n            const { price, cartQuantity } = cartItem;\n            const itemTotal = price * cartQuantity;\n  \n            cartTotal.total += itemTotal;\n            cartTotal.quantity += cartQuantity;\n            return cartTotal;\n          },\n          {\n            total: 0,\n            quantity: 0,\n          }\n        );\n        total = parseFloat(total.toFixed(2));\n        state.cartTotalQuantity = quantity;\n        state.cartTotalAmount = total;\n      },\n      clearCart(state, action) {\n        state.cartItems = [];\n        localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n        toast.error(\"Cart cleared\", { position: \"bottom-left\" });\n      },\n    },\n  });\n  \n  export const { addToCart, decreaseCart, removeFromCart, getTotals, clearCart } =\n    cartSlice.actions;\n  \n  export default cartSlice.reducer;\n  \n\n\n// export const { addToCart, remoFromCart,decreaseCart,Clearcart,getToals }=cartSlice.actions;\n// export default cartSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}