{"ast":null,"code":"// import { createSlice ,createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n// import  axios from \"axios\"\nimport axios from \"axios\";\nconst initialState = {\n  items: [],\n  status: null\n};\nexport const productsFetch = createAsyncThunk(\"products/productsFetch\", async () => {\n  const response = await axios.get('http://localhost:5000/products');\n  return response === null || response === void 0 ? void 0 : response.data;\n});\n\n// const productsSlice=createSlice({\n//     name:\"products\",\n//     initialState,\n//     reducers:{},\n//     extraReducers:{\n//         [productsFetch.pending]:(state,action)=>{\n//             state.status = \"pending\"\n//         },\n//         [productsFetch.fulfilled]:(state,action)=>{\n//             state.status = \"success\";\n//             state.itmes=action.pyload;\n//         },  \n//         [productsFetch.rejected]:(state,action)=>{\n//             state.status = \"rejected\";\n\n//         },\n//     }\n// })\n// export default productsSlice.reducer\n\n// const productsSlice = createSlice({\n//   name: \"products\",\n//   initialState,\n//   reducers: {},\n//   extraReducers: {\n//     [productsFetch.pending]: (state, action) => {\n//       state.status = \"pending\";\n//     },\n//     [productsFetch.fulfilled]: (state, action) => {\n//       state.items = action.payload;\n//       state.status = \"success\";\n//     },\n//     [productsFetch.rejected]: (state, action) => {\n//       state.status = \"rejected\";\n//     },\n//   },\n// });\n\n// export default productsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","initialState","items","status","productsFetch","response","get","data"],"sources":["/Users/xasan/Desktop/asaxiyuz/Fron-end/src/Components/features/ProductSlice.js"],"sourcesContent":["// import { createSlice ,createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n// import  axios from \"axios\"\nimport axios from \"axios\";\n\n\nconst initialState={\n    items:[],\n    status:null,\n}\n\n\nexport const productsFetch=createAsyncThunk(\n    \"products/productsFetch\",\n   async ()=>{\n      const response=  await axios.get('http://localhost:5000/products')\n      return response?.data\n    }\n    );\n\n// const productsSlice=createSlice({\n//     name:\"products\",\n//     initialState,\n//     reducers:{},\n//     extraReducers:{\n//         [productsFetch.pending]:(state,action)=>{\n//             state.status = \"pending\"\n//         },\n//         [productsFetch.fulfilled]:(state,action)=>{\n//             state.status = \"success\";\n//             state.itmes=action.pyload;\n//         },  \n//         [productsFetch.rejected]:(state,action)=>{\n//             state.status = \"rejected\";\n        \n//         },\n//     }\n// })\n// export default productsSlice.reducer\n\n// const productsSlice = createSlice({\n//   name: \"products\",\n//   initialState,\n//   reducers: {},\n//   extraReducers: {\n//     [productsFetch.pending]: (state, action) => {\n//       state.status = \"pending\";\n//     },\n//     [productsFetch.fulfilled]: (state, action) => {\n//       state.items = action.payload;\n//       state.status = \"success\";\n//     },\n//     [productsFetch.rejected]: (state, action) => {\n//       state.status = \"rejected\";\n//     },\n//   },\n// });\n\n// export default productsSlice.reducer;\n\n\n"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE;AACA,OAAOC,KAAK,MAAM,OAAO;AAGzB,MAAMC,YAAY,GAAC;EACfC,KAAK,EAAC,EAAE;EACRC,MAAM,EAAC;AACX,CAAC;AAGD,OAAO,MAAMC,aAAa,GAACL,gBAAgB,CACvC,wBAAwB,EACzB,YAAU;EACP,MAAMM,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAAC,gCAAgC,CAAC;EAClE,OAAOD,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEE,IAAI;AACvB,CAAC,CACA;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}